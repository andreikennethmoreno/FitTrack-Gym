
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import tkinter as tk
import datetime
import sqlite3
from tkinter import ttk
from datetime import datetime
from datetime import date
import subprocess

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\GYM-PROGRAM\GymTrack\assets2\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def add_gymLog():
    full_name = name_entry.get()
    member = gym_options.get()
    if full_name and member:
        cursor.execute("INSERT INTO gymLogs (full_name, member) VALUES (?, ?)", (full_name, member))
        conn.commit()
        load_gymLog()
        clear_entries()
        print("Successfully added" + full_name + ' ' +  member)
    else:
        messagebox.showwarning("Warning", "Please fill in all fields.")

def sessionOut():
    selected_item = gymLog_tree.selection()
    if selected_item:
        item_values = gymLog_tree.item(selected_item, "values")
        gymLog_id = int(item_values[0])
        time_now = datetime.now()
        out_session = time_now.strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute("UPDATE gymLogs SET out_session=? WHERE log_id=?", (out_session, gymLog_id))
        conn.commit()
        load_gymLog()
        clear_entries()
      
    else:
        messagebox.showwarning("Warning", "Please select a Log.")

def update_gymLog():
    selected_gymLog = gymLog_tree.selection()
    if selected_gymLog:
        gymLog_id = int(gymLog_tree.item(selected_gymLog, "values")[0])
        name = name_entry.get()
        member = gym_options.get()
        if name and member:
            cursor.execute("UPDATE gymLogs SET full_name=?, member=? WHERE log_id=?", (name, member, gymLog_id))
            conn.commit()
            load_gymLog()
            clear_entries()
        else:
            messagebox.showwarning("Warning", "Please fill in all fields.")
    else:
        messagebox.showwarning("Warning", "Please select a record to update.")
        
        
def logout():
    window.destroy()  
    subprocess.run(['python', 'login.py'])

def gymMember():
    window.destroy()  

    subprocess.run(['python', 'gymMembers.py'])


def delete_gymLog():
    selected_gymLog = gymLog_tree.selection()
    if selected_gymLog:
        gymLog_id = int(gymLog_tree.item(selected_gymLog, "values")[0])
        cursor.execute("DELETE FROM gymLogs WHERE log_id=?", (gymLog_id,))
        conn.commit()
        load_gymLog()
        clear_entries()
    else:
        messagebox.showwarning("Warning", "Please select a gymLog to delete.")

from datetime import datetime, date

def load_gymLog():
    for record in gymLog_tree.get_children():
        gymLog_tree.delete(record)

    today_date = date.today().strftime("%Y-%m-%d")

    cursor.execute("SELECT * FROM gymLogs WHERE DATE(in_session) = ?", (today_date,))
    gymLogs = cursor.fetchall()

    for row in gymLogs:
        gymLog_tree.insert("", "end", values=(row[0], row[1], row[2], row[3], row[4]))

def clear_entries():
    name_entry.delete(0, tk.END)
    gym_options.set("False")
    
    
def search():
    search = entry_find_1.get()
    print("Searching..." + search)
    
    # Clear the treeview
    for item in gymLog_tree.get_children():
        gymLog_tree.delete(item)
    
      # Get today's date in the format 'YYYY-MM-DD'
    today_date = date.today().strftime("%Y-%m-%d")

    # Combine the queries
    cursor.execute(
        "SELECT * FROM gymLogs WHERE DATE(in_session) = ? AND full_name LIKE ?",
        (today_date, '%' + search + '%')
)
    
    gymLog = cursor.fetchall()
    
    # Insert the results into the treeview
    if gymLog:
        for row in gymLog:
            gymLog_tree.insert("", "end", values=(row[0], row[1], row[2], row[3], row[4]))
        
        # Clear the search entry field
        entry_find_1.delete(0, tk.END)
    else:
        print("No matching records found.")

window = tk.Tk()

window.geometry("1100x700")
window.configure(bg = "#FFFFFF")
window.title("Gym App")

conn = sqlite3.connect("gym.db")
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS gymLogs (
    log_id INTEGER PRIMARY KEY,
    full_name TEXT,
    in_session DATETIME DEFAULT CURRENT_TIMESTAMP,
    out_session TEXT,   
    member TEXT
)''')


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 700,
    width = 1100,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    550.0,
    41.0,
    image=image_image_1
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    198.0,
    156.5,
    image=entry_image_1
)
name_entry = Entry(
    bd=0,
    bg="#E4E4E4",
    fg="#000716",
    highlightthickness=0
)
name_entry.place(
    x=71.0,
    y=139.0,
    width=254.0,
    height=33.0
)


gym_options = tk.StringVar(value="False")
gym_options.set("False")

gym_yes = tk.Radiobutton(window, text="Yes", variable=gym_options, value="True")
gym_yes.place(x=363.0, y=139.0, width=100.0, height=33.0)

gym_no = tk.Radiobutton(window, text="No", variable=gym_options, value="False")
gym_no.place(x=463.0, y=139.0, width=100.0, height=33.0)


# Get the current date and time
current_date = datetime.now().strftime("%A, %B %d %Y")

# Use the current_date variable in your canvas.create_text function
canvas.create_text(
    71.0,
    206.0,
    anchor="nw",
    text=current_date,
    fill="#000000",
    font=("Inter Bold", 24 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
add_Button = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=add_gymLog,
    relief="flat"
)
add_Button.place(
    x=670.0,
    y=139.0,
    width=70.0,
    height=35.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
edit_Button = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=update_gymLog,    
    relief="flat"
)
edit_Button.place(
    x=854.0,
    y=139.0,
    width=70.0,
    height=35.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
out_Button = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=sessionOut,
    relief="flat"
)
out_Button.place(
    x=762.0,
    y=139.0,
    width=70.0,
    height=35.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
del_Button = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=delete_gymLog,
    relief="flat"
)
del_Button.place(
    x=946.0,
    y=139.0,
    width=70.0,
    height=35.0
)

canvas.create_text(
    71.0,
    114.0,
    anchor="nw",
    text="FullName",
    fill="#474747",
    font=("Inter Bold", 14 * -1)
)

canvas.create_text(
    363.0,
    114.0,
    anchor="nw",
    text="IsMember?",
    fill="#474747",
    font=("Inter Bold", 14 * -1)
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
logOut_Button = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=logout,
    relief="flat"
)
logOut_Button.place(
    x=966.0,
    y=16.0,
    width=131.0,
    height=46.0
)

find_image_1 = PhotoImage(
    file=relative_to_assets("find_1.png"))
find_1 = Button(
    image=find_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=search,
    relief="flat"
)
find_1.place(
    x=946.0,
    y=217.0,
    width=70.0,
    height=35.0
)

entry_find_image_1 = PhotoImage(
    file=relative_to_assets("entry_find_1.png"))
entry_bg_1 = canvas.create_image(
    805.0,
    234.5,
    image=entry_find_image_1
)
entry_find_1 = Entry(
    bd=0,
    bg="#E4E4E4",
    fg="#000716",
    highlightthickness=0
)
entry_find_1.place(
    x=678.0,
    y=217.0,
    width=254.0,
    height=33.0
)

canvas.create_text(
    678.0,
    192.0,
    anchor="nw",
    text="Search\n",
    fill="#474747",
    font=("Inter Bold", 14 * -1)
)

# Remove the creation of image_2
gymLog_tree = ttk.Treeview(window, columns=('Log ID', 'Full Name', 'In Session', 'Out Session', 'Is Member'), show='headings')

gymLog_tree.heading('Log ID', text='Log ID', anchor=tk.CENTER)
gymLog_tree.column('Log ID', anchor=tk.CENTER, width=100)

gymLog_tree.heading('Full Name', text='Full Name', anchor=tk.CENTER)
gymLog_tree.column('Full Name', anchor=tk.CENTER, width=350)

gymLog_tree.heading('In Session', text='In Session', anchor=tk.CENTER)
gymLog_tree.column('In Session', anchor=tk.CENTER)

gymLog_tree.heading('Out Session', text='Out Session', anchor=tk.CENTER)
gymLog_tree.column('Out Session', anchor=tk.CENTER)

gymLog_tree.heading('Is Member', text='Is Member', anchor=tk.CENTER)
gymLog_tree.column('Is Member', anchor=tk.CENTER, width=100)

canvas.create_window(550.0, 430.0, window=gymLog_tree, height=320)

load_gymLog()


button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
gymLog_Button = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("gymLog_Button clicked"),
    relief="flat"
)
gymLog_Button.place(
    x=13.0,
    y=15.0,
    width=138.0,
    height=44.0
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
gymMembers_button = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=gymMember,
    relief="flat"
)
gymMembers_button.place(
    x=177.0,
    y=16.0,
    width=196.0,
    height=50.0
)






window.resizable(False, False)
window.mainloop()



